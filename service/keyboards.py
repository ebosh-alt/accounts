import logging

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from data.config import link_support
from models.database import accounts

logger = logging.getLogger(__name__)


class Builder:
    @staticmethod
    def create_keyboard(name_buttons: list | dict, *sizes: int) -> types.InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if type(name_buttons) is list:
            for name_button in name_buttons:
                keyboard.button(
                    text=name_button, callback_data=name_button
                )
        elif type(name_buttons) is dict:
            for name_button in name_buttons:
                if "http" in name_buttons[name_button] or "@" in name_buttons[name_button]:
                    keyboard.button(
                        text=name_button, url=name_buttons[name_button]
                    )
                else:
                    keyboard.button(
                        text=name_button, callback_data=name_buttons[name_button]
                    )

        if len(sizes) == 0:
            sizes = (1,)
        keyboard.adjust(*sizes)
        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=True)

    @staticmethod
    def create_reply_keyboard(name_buttons: list = None, one_time_keyboard: bool = False, request_contact: bool = False,
                              *sizes) -> types.ReplyKeyboardMarkup:
        keyboard = ReplyKeyboardBuilder()
        for name_button in name_buttons:
            if name_button is not tuple:
                keyboard.button(
                    text=name_button,
                    request_contact=request_contact
                )
            else:
                keyboard.button(
                    text=name_button,
                    request_contact=request_contact

                )
        if len(sizes) == 0:
            sizes = (1,)
        keyboard.adjust(*sizes)
        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=one_time_keyboard)

    @staticmethod
    def create_force_reply(text: str):
        return types.ForceReply(input_field_placeholder=text)


class Keyboards:
    menu_kb = Builder.create_keyboard(
        {"üõí –ú–∞–≥–∞–∑–∏–Ω": "shop",
         "üìú –ü—Ä–∞–≤–∏–ª–∞": "rules",
         "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞": link_support,
         "üì¶ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫": "history_buy"})
    back_menu_kb = Builder.create_keyboard({"–ù–∞–∑–∞–¥": "back_menu"})

    admin_menu_kb = Builder.create_keyboard(
        {"–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É": "cancel_buy",
         "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–¥–µ–ª–∫–∏": "show_deals",
         "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ –ø—Ä–æ–¥–∞–≤—Ü–∞": "show_seller_info",
         "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å": "change_balance"})
    admin_back_menu_kb = Builder.create_keyboard({"–ù–∞–∑–∞–¥": "admin_back_menu"})
    manager_menu_kb = Builder.create_keyboard(
        {
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã": "load_accs",
            "–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç": "create_deal"
        }
    )
    manager_menu_load_kb = Builder.create_keyboard(
        {
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∞–∫–∫–∞—É–Ω—Ç—ã": "load_accs",
            "–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç": "create_deal"
        }
    )
    manager_back_menu_kb = Builder.create_keyboard({"–ù–∞–∑–∞–¥": "manager_back_menu"})

    # def manager_create_deal_input_filed_guarant(text:str) :
    #     return Builder.create_force_reply(text=text)

    manager_deal_cr_choose_g_type = Builder.create_keyboard(
        {
            "–° –≥–∞—Ä–∞–Ω—Ç–æ–º": "cr_deal_g",
            "–ë–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞": "cr_deal_not_g"
        }
    )
    manager_deal_cr_confirm = Builder.create_keyboard(
        {
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å": "cr_deal_success",
            "–û—Ç–º–µ–Ω–∞": "cr_deal_unsuccess"
        }
    )

    # choice_count_account_kb

    choice_guarantor_kb = Builder.create_keyboard({
        "C –≥–∞—Ä–∞–Ω—Ç–æ–º": f"yes_guarantor",
        "–ë–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞": f"no_guarantor",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞": "back_to_choice_account",
        "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    })
    ready_payment_kb = Builder.create_keyboard({
        "–û–ø–ª–∞—Ç–∞": "payment",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞": "back_to_choice_account",
        "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    })

    payment_kb = Builder.create_keyboard({
        "–û–ø–ª–∞—Ç–∏–ª": "complete_payment"
    })
    support_kb = Builder.create_keyboard({
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": link_support
    })
    confirm_payment_kb = Builder.create_keyboard({
        "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": link_support})

    mark_seller_kb = Builder.create_keyboard({
        # "0": "0",
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5",
    })

    # confirm_account_user_kb =

    @staticmethod
    async def confirm_account_user_kb(deals_id):
        deals_id = [str(id) for id in deals_id]
        return Builder.create_keyboard({
            "–û–∫": f"ok_account_{",".join(deals_id)}"
        })

    @staticmethod
    async def shops_kb():
        buttons = await accounts.get_shops()
        buttons.append("–û–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")
        buttons.append("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        logger.info(f"{buttons}")
        kb = Builder.create_keyboard(buttons)
        return kb

    @staticmethod
    async def name_accounts_shop_kb(shop):
        buttons = await accounts.get_name_accounts_shop(shop)
        buttons.append("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞")
        buttons.append("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        logger.info(f"{buttons}")
        kb = Builder.create_keyboard(buttons)
        return kb

    @staticmethod
    async def payment_manually(deal_id):
        confirm_cr_deal_by_user = Builder.create_keyboard(
            {
                "–û–ø–ª–∞—Ç–∏—Ç—å": f"payment_manually_{deal_id}",
            }
        )
        return confirm_cr_deal_by_user

    @staticmethod
    async def payment(link: str):
        return Builder.create_keyboard({
            "–û–ø–ª–∞—Ç–∏—Ç—å": link,
            "–û–ø–ª–∞—Ç–∏–ª": "complete_payment"
        })

    @staticmethod
    async def choice_count_account(name: str = None, shop: str = None, count: int = None):
        if count is None:
            count = len(await accounts.get_account_by_name(name, shop))
        if count <= 1:
            return Builder.create_keyboard({
                "C –≥–∞—Ä–∞–Ω—Ç–æ–º": f"yes_guarantor",
                "–ë–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞": f"no_guarantor",
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞": "back_to_choice_account",
                "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            })
        else:
            return Builder.create_keyboard({
                "-1": "remove_account",
                "+1": "add_account",
                "C –≥–∞—Ä–∞–Ω—Ç–æ–º": f"yes_guarantor",
                "–ë–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞": f"no_guarantor",
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞": "back_to_choice_account",
                "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            }, 2, 2, 1, 1)
